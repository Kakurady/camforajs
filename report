#Outline.

## Introduction

### The mobile robots problem

- mobile robots as models of real robots
-- see -> understand -> think -> act
-- robots as particles
-- memory: oblivious, constant, limited, unlimited
-- sensing
--- understanding/cognition: assume perfect (unlike real life, where robots has to understand raw camera/lidar/GPS/mag/gyro/etc... data); precise accuracy
--- coordinate system: agreement/disagreement on distances, orientation
--- vision: multiplicity detection, range, obstruction
-- computation
-- output
--- movement: 
--- communication: lights
Strictest: oblivious robots without coordinate agreement and no communication

- the issue of time
-- real robots might run all the time, running multiple things at once <need ref>
-- theoretical robots run on a schedule, running in stages
--- look -> compute -> move
--- synchronicity
--- fairness
- theoretical proofs
-- however, sometimes useful to see algorithm

- Why you should care 
( why? )
 - mobile geometry
 - interesting theory in computing - what can and not be done, with what minimal resources ( like turing machines ), understanding limits and tradeoffs
 - minimize cost, maximize redundancy ( use simpler words later )
    - sself-stab is important
 
## Previous work

### CORDA simulator

### Sycamore

## Motivation
Sycamore is great but there's things missing...
- It's in Java
-- You need to download JDK and JRE
- No interactivity

Want to build something that
- runs in the browser
- fast to download
- is interactive

## Description

### design
In general the visualization is specific to the algorithm and renderer

### implementation
- using javascript
- dependencies
-- d3
-- glmatrix
- one instance for each
- broken into 3 modules: model (simulation), view (renderer & UI), controller (environment & API)
-- model
-- view
--- svg renderer
--- ui
--- allow multiple kinds of views: svg, r
-- controller

## Discussion
- Turns out avoiding Java doesn't avoid problems with Sycamore; 
-- once it gets complex, browser no longer suitable as development environment
-- You still need to depend on packages
- javascript modularziation and packaging is a pain
-- getting ES6 modules to play nice with globals/AMD is kind of undefined right now
-- glmatrix behaves differently 
-- small vs large packages; dependency hell 
-- 


## References

I really don't know what to say. Where to write more text, where to write less. Does that even make sense. Write as much as I can, then trim it down. still has 20 hours this week. nobody can know what it would look like after 20 hours. talk as you can. Given passion I can rant for a lot. 
